Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> js
Rule 1     js -> element js
Rule 2     js -> <empty>
Rule 3     element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
Rule 4     element -> stmt SEMICOLON
Rule 5     optparams -> params
Rule 6     optparams -> <empty>
Rule 7     params -> IDENTIFIER COMMA params
Rule 8     params -> IDENTIFIER
Rule 9     compoundstmt -> LBRACE statements RBRACE
Rule 10    statements -> stmt SEMICOLON statements
Rule 11    statements -> <empty>
Rule 12    stmt -> IF exp compoundstmt
Rule 13    stmt -> IF exp compoundstmt ELSE compoundstmt
Rule 14    stmt -> IDENTIFIER EQUAL exp
Rule 15    stmt -> RETURN exp
Rule 16    stmt -> VAR IDENTIFIER EQUAL exp
Rule 17    stmt -> exp
Rule 18    exp -> IDENTIFIER
Rule 19    exp -> NUMBER
Rule 20    exp -> STRING
Rule 21    exp -> TRUE
Rule 22    exp -> FALSE
Rule 23    exp -> NOT exp
Rule 24    exp -> LPAREN exp RPAREN
Rule 25    exp -> FUNCTION LPAREN optparams RPAREN compoundstmt
Rule 26    exp -> exp OROR exp
Rule 27    exp -> exp ANDAND exp
Rule 28    exp -> exp EQUALEQUAL exp
Rule 29    exp -> exp LT exp
Rule 30    exp -> exp GT exp
Rule 31    exp -> exp LE exp
Rule 32    exp -> exp GE exp
Rule 33    exp -> exp PLUS exp
Rule 34    exp -> exp MINUS exp
Rule 35    exp -> exp TIMES exp
Rule 36    exp -> exp DIVIDE exp
Rule 37    exp -> IDENTIFIER LPAREN optargs RPAREN
Rule 38    optargs -> args
Rule 39    optargs -> <empty>
Rule 40    args -> exp COMMA args
Rule 41    args -> exp

Terminals, with rules where they appear

ANDAND               : 27
COMMA                : 7 40
DIVIDE               : 36
ELSE                 : 13
EQUAL                : 14 16
EQUALEQUAL           : 28
FALSE                : 22
FUNCTION             : 3 25
GE                   : 32
GT                   : 30
IDENTIFIER           : 3 7 8 14 16 18 37
IF                   : 12 13
LBRACE               : 9
LE                   : 31
LPAREN               : 3 24 25 37
LT                   : 29
MINUS                : 34
NOT                  : 23
NUMBER               : 19
OROR                 : 26
PLUS                 : 33
RBRACE               : 9
RETURN               : 15
RPAREN               : 3 24 25 37
SEMICOLON            : 4 10
STRING               : 20
TIMES                : 35
TRUE                 : 21
VAR                  : 16
error                : 

Nonterminals, with rules where they appear

args                 : 38 40
compoundstmt         : 3 12 13 13 25
element              : 1
exp                  : 12 13 14 15 16 17 23 24 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 40 41
js                   : 1 0
optargs              : 37
optparams            : 3 25
params               : 5 7
statements           : 9 10
stmt                 : 4 10

Parsing method: LALR

state 0

    (0) S' -> . js
    (1) js -> . element js
    (2) js -> .
    (3) element -> . FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (4) element -> . stmt SEMICOLON
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    $end            reduce using rule 2 (js -> .)
    FUNCTION        shift and go to state 14
    IF              shift and go to state 6
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 10
    VAR             shift and go to state 5
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12

    js                             shift and go to state 7
    exp                            shift and go to state 8
    element                        shift and go to state 9
    stmt                           shift and go to state 11

state 1

    (19) exp -> NUMBER .

    OROR            reduce using rule 19 (exp -> NUMBER .)
    ANDAND          reduce using rule 19 (exp -> NUMBER .)
    EQUALEQUAL      reduce using rule 19 (exp -> NUMBER .)
    LT              reduce using rule 19 (exp -> NUMBER .)
    GT              reduce using rule 19 (exp -> NUMBER .)
    LE              reduce using rule 19 (exp -> NUMBER .)
    GE              reduce using rule 19 (exp -> NUMBER .)
    PLUS            reduce using rule 19 (exp -> NUMBER .)
    MINUS           reduce using rule 19 (exp -> NUMBER .)
    TIMES           reduce using rule 19 (exp -> NUMBER .)
    DIVIDE          reduce using rule 19 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 19 (exp -> NUMBER .)
    COMMA           reduce using rule 19 (exp -> NUMBER .)
    RPAREN          reduce using rule 19 (exp -> NUMBER .)
    LBRACE          reduce using rule 19 (exp -> NUMBER .)


state 2

    (20) exp -> STRING .

    OROR            reduce using rule 20 (exp -> STRING .)
    ANDAND          reduce using rule 20 (exp -> STRING .)
    EQUALEQUAL      reduce using rule 20 (exp -> STRING .)
    LT              reduce using rule 20 (exp -> STRING .)
    GT              reduce using rule 20 (exp -> STRING .)
    LE              reduce using rule 20 (exp -> STRING .)
    GE              reduce using rule 20 (exp -> STRING .)
    PLUS            reduce using rule 20 (exp -> STRING .)
    MINUS           reduce using rule 20 (exp -> STRING .)
    TIMES           reduce using rule 20 (exp -> STRING .)
    DIVIDE          reduce using rule 20 (exp -> STRING .)
    SEMICOLON       reduce using rule 20 (exp -> STRING .)
    COMMA           reduce using rule 20 (exp -> STRING .)
    RPAREN          reduce using rule 20 (exp -> STRING .)
    LBRACE          reduce using rule 20 (exp -> STRING .)


state 3

    (23) exp -> NOT . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 16

state 4

    (22) exp -> FALSE .

    OROR            reduce using rule 22 (exp -> FALSE .)
    ANDAND          reduce using rule 22 (exp -> FALSE .)
    EQUALEQUAL      reduce using rule 22 (exp -> FALSE .)
    LT              reduce using rule 22 (exp -> FALSE .)
    GT              reduce using rule 22 (exp -> FALSE .)
    LE              reduce using rule 22 (exp -> FALSE .)
    GE              reduce using rule 22 (exp -> FALSE .)
    PLUS            reduce using rule 22 (exp -> FALSE .)
    MINUS           reduce using rule 22 (exp -> FALSE .)
    TIMES           reduce using rule 22 (exp -> FALSE .)
    DIVIDE          reduce using rule 22 (exp -> FALSE .)
    SEMICOLON       reduce using rule 22 (exp -> FALSE .)
    COMMA           reduce using rule 22 (exp -> FALSE .)
    RPAREN          reduce using rule 22 (exp -> FALSE .)
    LBRACE          reduce using rule 22 (exp -> FALSE .)


state 5

    (16) stmt -> VAR . IDENTIFIER EQUAL exp

    IDENTIFIER      shift and go to state 19


state 6

    (12) stmt -> IF . exp compoundstmt
    (13) stmt -> IF . exp compoundstmt ELSE compoundstmt
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 20

state 7

    (0) S' -> js .



state 8

    (17) stmt -> exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    SEMICOLON       reduce using rule 17 (stmt -> exp .)
    OROR            shift and go to state 26
    ANDAND          shift and go to state 21
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24


state 9

    (1) js -> element . js
    (1) js -> . element js
    (2) js -> .
    (3) element -> . FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (4) element -> . stmt SEMICOLON
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    $end            reduce using rule 2 (js -> .)
    FUNCTION        shift and go to state 14
    IF              shift and go to state 6
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 10
    VAR             shift and go to state 5
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12

    js                             shift and go to state 32
    exp                            shift and go to state 8
    element                        shift and go to state 9
    stmt                           shift and go to state 11

state 10

    (15) stmt -> RETURN . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 33

state 11

    (4) element -> stmt . SEMICOLON

    SEMICOLON       shift and go to state 34


state 12

    (24) exp -> LPAREN . exp RPAREN
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 35

state 13

    (14) stmt -> IDENTIFIER . EQUAL exp
    (18) exp -> IDENTIFIER .
    (37) exp -> IDENTIFIER . LPAREN optargs RPAREN

    EQUAL           shift and go to state 36
    OROR            reduce using rule 18 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 18 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 18 (exp -> IDENTIFIER .)
    LT              reduce using rule 18 (exp -> IDENTIFIER .)
    GT              reduce using rule 18 (exp -> IDENTIFIER .)
    LE              reduce using rule 18 (exp -> IDENTIFIER .)
    GE              reduce using rule 18 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 18 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 18 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 18 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 18 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 18 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 37


state 14

    (3) element -> FUNCTION . IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (25) exp -> FUNCTION . LPAREN optparams RPAREN compoundstmt

    IDENTIFIER      shift and go to state 38
    LPAREN          shift and go to state 39


state 15

    (21) exp -> TRUE .

    OROR            reduce using rule 21 (exp -> TRUE .)
    ANDAND          reduce using rule 21 (exp -> TRUE .)
    EQUALEQUAL      reduce using rule 21 (exp -> TRUE .)
    LT              reduce using rule 21 (exp -> TRUE .)
    GT              reduce using rule 21 (exp -> TRUE .)
    LE              reduce using rule 21 (exp -> TRUE .)
    GE              reduce using rule 21 (exp -> TRUE .)
    PLUS            reduce using rule 21 (exp -> TRUE .)
    MINUS           reduce using rule 21 (exp -> TRUE .)
    TIMES           reduce using rule 21 (exp -> TRUE .)
    DIVIDE          reduce using rule 21 (exp -> TRUE .)
    SEMICOLON       reduce using rule 21 (exp -> TRUE .)
    COMMA           reduce using rule 21 (exp -> TRUE .)
    RPAREN          reduce using rule 21 (exp -> TRUE .)
    LBRACE          reduce using rule 21 (exp -> TRUE .)


state 16

    (23) exp -> NOT exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 23 (exp -> NOT exp .)
    ANDAND          reduce using rule 23 (exp -> NOT exp .)
    EQUALEQUAL      reduce using rule 23 (exp -> NOT exp .)
    LT              reduce using rule 23 (exp -> NOT exp .)
    GT              reduce using rule 23 (exp -> NOT exp .)
    LE              reduce using rule 23 (exp -> NOT exp .)
    GE              reduce using rule 23 (exp -> NOT exp .)
    PLUS            reduce using rule 23 (exp -> NOT exp .)
    MINUS           reduce using rule 23 (exp -> NOT exp .)
    TIMES           reduce using rule 23 (exp -> NOT exp .)
    DIVIDE          reduce using rule 23 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 23 (exp -> NOT exp .)
    COMMA           reduce using rule 23 (exp -> NOT exp .)
    RPAREN          reduce using rule 23 (exp -> NOT exp .)
    LBRACE          reduce using rule 23 (exp -> NOT exp .)

  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]


state 17

    (18) exp -> IDENTIFIER .
    (37) exp -> IDENTIFIER . LPAREN optargs RPAREN

    COMMA           reduce using rule 18 (exp -> IDENTIFIER .)
    OROR            reduce using rule 18 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 18 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 18 (exp -> IDENTIFIER .)
    LT              reduce using rule 18 (exp -> IDENTIFIER .)
    GT              reduce using rule 18 (exp -> IDENTIFIER .)
    LE              reduce using rule 18 (exp -> IDENTIFIER .)
    GE              reduce using rule 18 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 18 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 18 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 18 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 18 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 18 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 18 (exp -> IDENTIFIER .)
    LBRACE          reduce using rule 18 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 37


state 18

    (25) exp -> FUNCTION . LPAREN optparams RPAREN compoundstmt

    LPAREN          shift and go to state 39


state 19

    (16) stmt -> VAR IDENTIFIER . EQUAL exp

    EQUAL           shift and go to state 40


state 20

    (12) stmt -> IF exp . compoundstmt
    (13) stmt -> IF exp . compoundstmt ELSE compoundstmt
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp
    (9) compoundstmt -> . LBRACE statements RBRACE

    OROR            shift and go to state 26
    ANDAND          shift and go to state 21
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    LBRACE          shift and go to state 42

    compoundstmt                   shift and go to state 41

state 21

    (27) exp -> exp ANDAND . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 43

state 22

    (33) exp -> exp PLUS . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 44

state 23

    (35) exp -> exp TIMES . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 45

state 24

    (36) exp -> exp DIVIDE . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 46

state 25

    (30) exp -> exp GT . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 47

state 26

    (26) exp -> exp OROR . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 48

state 27

    (31) exp -> exp LE . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 49

state 28

    (32) exp -> exp GE . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 50

state 29

    (28) exp -> exp EQUALEQUAL . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 51

state 30

    (29) exp -> exp LT . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 52

state 31

    (34) exp -> exp MINUS . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 53

state 32

    (1) js -> element js .

    $end            reduce using rule 1 (js -> element js .)


state 33

    (15) stmt -> RETURN exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    SEMICOLON       reduce using rule 15 (stmt -> RETURN exp .)
    OROR            shift and go to state 26
    ANDAND          shift and go to state 21
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24


state 34

    (4) element -> stmt SEMICOLON .

    FUNCTION        reduce using rule 4 (element -> stmt SEMICOLON .)
    IF              reduce using rule 4 (element -> stmt SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (element -> stmt SEMICOLON .)
    RETURN          reduce using rule 4 (element -> stmt SEMICOLON .)
    VAR             reduce using rule 4 (element -> stmt SEMICOLON .)
    NUMBER          reduce using rule 4 (element -> stmt SEMICOLON .)
    STRING          reduce using rule 4 (element -> stmt SEMICOLON .)
    TRUE            reduce using rule 4 (element -> stmt SEMICOLON .)
    FALSE           reduce using rule 4 (element -> stmt SEMICOLON .)
    NOT             reduce using rule 4 (element -> stmt SEMICOLON .)
    LPAREN          reduce using rule 4 (element -> stmt SEMICOLON .)
    $end            reduce using rule 4 (element -> stmt SEMICOLON .)


state 35

    (24) exp -> LPAREN exp . RPAREN
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    RPAREN          shift and go to state 54
    OROR            shift and go to state 26
    ANDAND          shift and go to state 21
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24


state 36

    (14) stmt -> IDENTIFIER EQUAL . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 55

state 37

    (37) exp -> IDENTIFIER LPAREN . optargs RPAREN
    (38) optargs -> . args
    (39) optargs -> .
    (40) args -> . exp COMMA args
    (41) args -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RPAREN          reduce using rule 39 (optargs -> .)
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    args                           shift and go to state 57
    optargs                        shift and go to state 58
    exp                            shift and go to state 56

state 38

    (3) element -> FUNCTION IDENTIFIER . LPAREN optparams RPAREN compoundstmt

    LPAREN          shift and go to state 59


state 39

    (25) exp -> FUNCTION LPAREN . optparams RPAREN compoundstmt
    (5) optparams -> . params
    (6) optparams -> .
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    RPAREN          reduce using rule 6 (optparams -> .)
    IDENTIFIER      shift and go to state 60

    params                         shift and go to state 61
    optparams                      shift and go to state 62

state 40

    (16) stmt -> VAR IDENTIFIER EQUAL . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 63

state 41

    (12) stmt -> IF exp compoundstmt .
    (13) stmt -> IF exp compoundstmt . ELSE compoundstmt

    SEMICOLON       reduce using rule 12 (stmt -> IF exp compoundstmt .)
    ELSE            shift and go to state 64


state 42

    (9) compoundstmt -> LBRACE . statements RBRACE
    (10) statements -> . stmt SEMICOLON statements
    (11) statements -> .
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RBRACE          reduce using rule 11 (statements -> .)
    IF              shift and go to state 6
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 10
    VAR             shift and go to state 5
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 8
    statements                     shift and go to state 65
    stmt                           shift and go to state 66

state 43

    (27) exp -> exp ANDAND exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 27 (exp -> exp ANDAND exp .)
    ANDAND          reduce using rule 27 (exp -> exp ANDAND exp .)
    SEMICOLON       reduce using rule 27 (exp -> exp ANDAND exp .)
    COMMA           reduce using rule 27 (exp -> exp ANDAND exp .)
    RPAREN          reduce using rule 27 (exp -> exp ANDAND exp .)
    LBRACE          reduce using rule 27 (exp -> exp ANDAND exp .)
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! EQUALEQUAL      [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! LT              [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! GT              [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! LE              [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! GE              [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! PLUS            [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! TIMES           [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! DIVIDE          [ reduce using rule 27 (exp -> exp ANDAND exp .) ]
  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]


state 44

    (33) exp -> exp PLUS exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 33 (exp -> exp PLUS exp .)
    ANDAND          reduce using rule 33 (exp -> exp PLUS exp .)
    EQUALEQUAL      reduce using rule 33 (exp -> exp PLUS exp .)
    LT              reduce using rule 33 (exp -> exp PLUS exp .)
    GT              reduce using rule 33 (exp -> exp PLUS exp .)
    LE              reduce using rule 33 (exp -> exp PLUS exp .)
    GE              reduce using rule 33 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 33 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 33 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 33 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 33 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 33 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 33 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! TIMES           [ reduce using rule 33 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 33 (exp -> exp PLUS exp .) ]
  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 31 ]


state 45

    (35) exp -> exp TIMES exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 35 (exp -> exp TIMES exp .)
    ANDAND          reduce using rule 35 (exp -> exp TIMES exp .)
    EQUALEQUAL      reduce using rule 35 (exp -> exp TIMES exp .)
    LT              reduce using rule 35 (exp -> exp TIMES exp .)
    GT              reduce using rule 35 (exp -> exp TIMES exp .)
    LE              reduce using rule 35 (exp -> exp TIMES exp .)
    GE              reduce using rule 35 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 35 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 35 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 35 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 35 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 35 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 35 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 35 (exp -> exp TIMES exp .)
    LBRACE          reduce using rule 35 (exp -> exp TIMES exp .)

  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]


state 46

    (36) exp -> exp DIVIDE exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 36 (exp -> exp DIVIDE exp .)
    ANDAND          reduce using rule 36 (exp -> exp DIVIDE exp .)
    EQUALEQUAL      reduce using rule 36 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 36 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 36 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 36 (exp -> exp DIVIDE exp .)
    GE              reduce using rule 36 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 36 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 36 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 36 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 36 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 36 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 36 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 36 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 36 (exp -> exp DIVIDE exp .)

  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]


state 47

    (30) exp -> exp GT exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 30 (exp -> exp GT exp .)
    ANDAND          reduce using rule 30 (exp -> exp GT exp .)
    EQUALEQUAL      reduce using rule 30 (exp -> exp GT exp .)
    LT              reduce using rule 30 (exp -> exp GT exp .)
    GT              reduce using rule 30 (exp -> exp GT exp .)
    LE              reduce using rule 30 (exp -> exp GT exp .)
    GE              reduce using rule 30 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 30 (exp -> exp GT exp .)
    COMMA           reduce using rule 30 (exp -> exp GT exp .)
    RPAREN          reduce using rule 30 (exp -> exp GT exp .)
    LBRACE          reduce using rule 30 (exp -> exp GT exp .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! PLUS            [ reduce using rule 30 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 30 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 30 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 30 (exp -> exp GT exp .) ]
  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]


state 48

    (26) exp -> exp OROR exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 26 (exp -> exp OROR exp .)
    SEMICOLON       reduce using rule 26 (exp -> exp OROR exp .)
    COMMA           reduce using rule 26 (exp -> exp OROR exp .)
    RPAREN          reduce using rule 26 (exp -> exp OROR exp .)
    LBRACE          reduce using rule 26 (exp -> exp OROR exp .)
    ANDAND          shift and go to state 21
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! ANDAND          [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! EQUALEQUAL      [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! LT              [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! GT              [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! LE              [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! GE              [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! PLUS            [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! TIMES           [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp OROR exp .) ]
  ! OROR            [ shift and go to state 26 ]


state 49

    (31) exp -> exp LE exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 31 (exp -> exp LE exp .)
    ANDAND          reduce using rule 31 (exp -> exp LE exp .)
    EQUALEQUAL      reduce using rule 31 (exp -> exp LE exp .)
    LT              reduce using rule 31 (exp -> exp LE exp .)
    GT              reduce using rule 31 (exp -> exp LE exp .)
    LE              reduce using rule 31 (exp -> exp LE exp .)
    GE              reduce using rule 31 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 31 (exp -> exp LE exp .)
    COMMA           reduce using rule 31 (exp -> exp LE exp .)
    RPAREN          reduce using rule 31 (exp -> exp LE exp .)
    LBRACE          reduce using rule 31 (exp -> exp LE exp .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! PLUS            [ reduce using rule 31 (exp -> exp LE exp .) ]
  ! MINUS           [ reduce using rule 31 (exp -> exp LE exp .) ]
  ! TIMES           [ reduce using rule 31 (exp -> exp LE exp .) ]
  ! DIVIDE          [ reduce using rule 31 (exp -> exp LE exp .) ]
  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]


state 50

    (32) exp -> exp GE exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 32 (exp -> exp GE exp .)
    ANDAND          reduce using rule 32 (exp -> exp GE exp .)
    EQUALEQUAL      reduce using rule 32 (exp -> exp GE exp .)
    LT              reduce using rule 32 (exp -> exp GE exp .)
    GT              reduce using rule 32 (exp -> exp GE exp .)
    LE              reduce using rule 32 (exp -> exp GE exp .)
    GE              reduce using rule 32 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 32 (exp -> exp GE exp .)
    COMMA           reduce using rule 32 (exp -> exp GE exp .)
    RPAREN          reduce using rule 32 (exp -> exp GE exp .)
    LBRACE          reduce using rule 32 (exp -> exp GE exp .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! PLUS            [ reduce using rule 32 (exp -> exp GE exp .) ]
  ! MINUS           [ reduce using rule 32 (exp -> exp GE exp .) ]
  ! TIMES           [ reduce using rule 32 (exp -> exp GE exp .) ]
  ! DIVIDE          [ reduce using rule 32 (exp -> exp GE exp .) ]
  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]


state 51

    (28) exp -> exp EQUALEQUAL exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    ANDAND          reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    EQUALEQUAL      reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    SEMICOLON       reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    COMMA           reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    RPAREN          reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    LBRACE          reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! LT              [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! GT              [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! LE              [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! GE              [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! PLUS            [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! TIMES           [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]


state 52

    (29) exp -> exp LT exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 29 (exp -> exp LT exp .)
    ANDAND          reduce using rule 29 (exp -> exp LT exp .)
    EQUALEQUAL      reduce using rule 29 (exp -> exp LT exp .)
    LT              reduce using rule 29 (exp -> exp LT exp .)
    GT              reduce using rule 29 (exp -> exp LT exp .)
    LE              reduce using rule 29 (exp -> exp LT exp .)
    GE              reduce using rule 29 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 29 (exp -> exp LT exp .)
    COMMA           reduce using rule 29 (exp -> exp LT exp .)
    RPAREN          reduce using rule 29 (exp -> exp LT exp .)
    LBRACE          reduce using rule 29 (exp -> exp LT exp .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! PLUS            [ reduce using rule 29 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 29 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 29 (exp -> exp LT exp .) ]
  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]


state 53

    (34) exp -> exp MINUS exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    OROR            reduce using rule 34 (exp -> exp MINUS exp .)
    ANDAND          reduce using rule 34 (exp -> exp MINUS exp .)
    EQUALEQUAL      reduce using rule 34 (exp -> exp MINUS exp .)
    LT              reduce using rule 34 (exp -> exp MINUS exp .)
    GT              reduce using rule 34 (exp -> exp MINUS exp .)
    LE              reduce using rule 34 (exp -> exp MINUS exp .)
    GE              reduce using rule 34 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 34 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 34 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 34 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 34 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 34 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 34 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24

  ! TIMES           [ reduce using rule 34 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 34 (exp -> exp MINUS exp .) ]
  ! OROR            [ shift and go to state 26 ]
  ! ANDAND          [ shift and go to state 21 ]
  ! EQUALEQUAL      [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 31 ]


state 54

    (24) exp -> LPAREN exp RPAREN .

    OROR            reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    ANDAND          reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    EQUALEQUAL      reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    LE              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    GE              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 24 (exp -> LPAREN exp RPAREN .)


state 55

    (14) stmt -> IDENTIFIER EQUAL exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    SEMICOLON       reduce using rule 14 (stmt -> IDENTIFIER EQUAL exp .)
    OROR            shift and go to state 26
    ANDAND          shift and go to state 21
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24


state 56

    (40) args -> exp . COMMA args
    (41) args -> exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    COMMA           shift and go to state 67
    RPAREN          reduce using rule 41 (args -> exp .)
    OROR            shift and go to state 26
    ANDAND          shift and go to state 21
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24


state 57

    (38) optargs -> args .

    RPAREN          reduce using rule 38 (optargs -> args .)


state 58

    (37) exp -> IDENTIFIER LPAREN optargs . RPAREN

    RPAREN          shift and go to state 68


state 59

    (3) element -> FUNCTION IDENTIFIER LPAREN . optparams RPAREN compoundstmt
    (5) optparams -> . params
    (6) optparams -> .
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    RPAREN          reduce using rule 6 (optparams -> .)
    IDENTIFIER      shift and go to state 60

    params                         shift and go to state 61
    optparams                      shift and go to state 69

state 60

    (7) params -> IDENTIFIER . COMMA params
    (8) params -> IDENTIFIER .

    COMMA           shift and go to state 70
    RPAREN          reduce using rule 8 (params -> IDENTIFIER .)


state 61

    (5) optparams -> params .

    RPAREN          reduce using rule 5 (optparams -> params .)


state 62

    (25) exp -> FUNCTION LPAREN optparams . RPAREN compoundstmt

    RPAREN          shift and go to state 71


state 63

    (16) stmt -> VAR IDENTIFIER EQUAL exp .
    (26) exp -> exp . OROR exp
    (27) exp -> exp . ANDAND exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GT exp
    (31) exp -> exp . LE exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . PLUS exp
    (34) exp -> exp . MINUS exp
    (35) exp -> exp . TIMES exp
    (36) exp -> exp . DIVIDE exp

    SEMICOLON       reduce using rule 16 (stmt -> VAR IDENTIFIER EQUAL exp .)
    OROR            shift and go to state 26
    ANDAND          shift and go to state 21
    EQUALEQUAL      shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 25
    LE              shift and go to state 27
    GE              shift and go to state 28
    PLUS            shift and go to state 22
    MINUS           shift and go to state 31
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24


state 64

    (13) stmt -> IF exp compoundstmt ELSE . compoundstmt
    (9) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 42

    compoundstmt                   shift and go to state 72

state 65

    (9) compoundstmt -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 73


state 66

    (10) statements -> stmt . SEMICOLON statements

    SEMICOLON       shift and go to state 74


state 67

    (40) args -> exp COMMA . args
    (40) args -> . exp COMMA args
    (41) args -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    args                           shift and go to state 75
    exp                            shift and go to state 56

state 68

    (37) exp -> IDENTIFIER LPAREN optargs RPAREN .

    OROR            reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ANDAND          reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    EQUALEQUAL      reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LT              reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GT              reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LE              reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GE              reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    PLUS            reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MINUS           reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TIMES           reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    SEMICOLON       reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    COMMA           reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LBRACE          reduce using rule 37 (exp -> IDENTIFIER LPAREN optargs RPAREN .)


state 69

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams . RPAREN compoundstmt

    RPAREN          shift and go to state 76


state 70

    (7) params -> IDENTIFIER COMMA . params
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    IDENTIFIER      shift and go to state 60

    params                         shift and go to state 77

state 71

    (25) exp -> FUNCTION LPAREN optparams RPAREN . compoundstmt
    (9) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 42

    compoundstmt                   shift and go to state 78

state 72

    (13) stmt -> IF exp compoundstmt ELSE compoundstmt .

    SEMICOLON       reduce using rule 13 (stmt -> IF exp compoundstmt ELSE compoundstmt .)


state 73

    (9) compoundstmt -> LBRACE statements RBRACE .

    SEMICOLON       reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    OROR            reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    ANDAND          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    EQUALEQUAL      reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    LT              reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    GT              reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    LE              reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    GE              reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    PLUS            reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    MINUS           reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    TIMES           reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    LBRACE          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    RPAREN          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    COMMA           reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    IF              reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    VAR             reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    NUMBER          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    STRING          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    TRUE            reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    FALSE           reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    NOT             reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    LPAREN          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    $end            reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)


state 74

    (10) statements -> stmt SEMICOLON . statements
    (10) statements -> . stmt SEMICOLON statements
    (11) statements -> .
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . FUNCTION LPAREN optparams RPAREN compoundstmt
    (26) exp -> . exp OROR exp
    (27) exp -> . exp ANDAND exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GT exp
    (31) exp -> . exp LE exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp PLUS exp
    (34) exp -> . exp MINUS exp
    (35) exp -> . exp TIMES exp
    (36) exp -> . exp DIVIDE exp
    (37) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RBRACE          reduce using rule 11 (statements -> .)
    IF              shift and go to state 6
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 10
    VAR             shift and go to state 5
    NUMBER          shift and go to state 1
    STRING          shift and go to state 2
    TRUE            shift and go to state 15
    FALSE           shift and go to state 4
    NOT             shift and go to state 3
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 18

    exp                            shift and go to state 8
    statements                     shift and go to state 79
    stmt                           shift and go to state 66

state 75

    (40) args -> exp COMMA args .

    RPAREN          reduce using rule 40 (args -> exp COMMA args .)


state 76

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN . compoundstmt
    (9) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 42

    compoundstmt                   shift and go to state 80

state 77

    (7) params -> IDENTIFIER COMMA params .

    RPAREN          reduce using rule 7 (params -> IDENTIFIER COMMA params .)


state 78

    (25) exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .

    OROR            reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    ANDAND          reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    EQUALEQUAL      reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    LT              reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    GT              reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    LE              reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    GE              reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    PLUS            reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    MINUS           reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    TIMES           reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    DIVIDE          reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    SEMICOLON       reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    COMMA           reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    RPAREN          reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)
    LBRACE          reduce using rule 25 (exp -> FUNCTION LPAREN optparams RPAREN compoundstmt .)


state 79

    (10) statements -> stmt SEMICOLON statements .

    RBRACE          reduce using rule 10 (statements -> stmt SEMICOLON statements .)


state 80

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .

    FUNCTION        reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IF              reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RETURN          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    VAR             reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    NUMBER          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    STRING          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    TRUE            reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    FALSE           reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    NOT             reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    LPAREN          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    $end            reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)

