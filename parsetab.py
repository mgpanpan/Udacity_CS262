
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'F1775ED798C2F83E50AFB2A7EC9D24BB'
    
_lr_action_items = {'GT':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,20,-21,-20,-18,-22,-18,20,-23,20,20,-24,-30,20,-35,20,-36,-31,-29,-34,-32,-33,20,20,20,20,-37,-9,-25,]),'LPAREN':([0,1,7,8,11,12,13,14,16,18,19,20,21,22,23,24,25,26,27,28,29,30,36,37,39,53,54,67,73,74,80,],[1,1,1,1,1,1,36,38,36,38,-4,1,1,1,1,1,1,1,1,1,1,1,1,1,62,1,1,1,1,-9,-3,]),'ANDAND':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,23,-21,-20,-18,-22,-18,23,-23,23,23,-24,-30,23,-35,-27,-36,-31,-29,-34,-32,-33,-28,23,23,23,-37,-9,-25,]),'STRING':([0,1,7,8,11,12,19,20,21,22,23,24,25,26,27,28,29,30,36,37,53,54,67,73,74,80,],[10,10,10,10,10,10,-4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-9,-3,]),'DIVIDE':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,24,-21,-20,-18,-22,-18,24,-23,24,24,-24,24,24,-35,24,-36,24,24,24,24,24,24,24,24,24,-37,-9,-25,]),'NUMBER':([0,1,7,8,11,12,19,20,21,22,23,24,25,26,27,28,29,30,36,37,53,54,67,73,74,80,],[3,3,3,3,3,3,-4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-9,-3,]),'IDENTIFIER':([0,1,7,8,9,11,12,14,19,20,21,22,23,24,25,26,27,28,29,30,36,37,38,53,54,62,67,70,73,74,80,],[13,16,16,16,33,13,16,39,-4,16,16,16,16,16,16,16,16,16,16,16,16,16,61,13,16,61,16,61,13,-9,-3,]),'NOT':([0,1,7,8,11,12,19,20,21,22,23,24,25,26,27,28,29,30,36,37,53,54,67,73,74,80,],[7,7,7,7,7,7,-4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-9,-3,]),'TIMES':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,22,-21,-20,-18,-22,-18,22,-23,22,22,-24,22,22,-35,22,-36,22,22,22,22,22,22,22,22,22,-37,-9,-25,]),'EQUAL':([13,33,],[37,54,]),'MINUS':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,27,-21,-20,-18,-22,-18,27,-23,27,27,-24,27,27,-35,27,-36,27,27,-34,27,-33,27,27,27,27,-37,-9,-25,]),'RPAREN':([3,6,10,15,16,17,31,36,38,40,41,42,43,44,45,46,47,48,49,50,51,55,56,57,59,60,61,62,68,71,74,75,76,77,],[-19,-21,-20,-22,-18,40,-23,-39,-6,-24,-30,-26,-35,-27,-36,-31,-29,-34,-32,-33,-28,-38,-41,68,69,-5,-8,-6,-37,78,-9,-40,-25,-7,]),'LBRACE':([3,6,10,15,16,31,32,40,41,42,43,44,45,46,47,48,49,50,51,63,68,69,74,76,78,],[-19,-21,-20,-22,-18,-23,53,-24,-30,-26,-35,-27,-36,-31,-29,-34,-32,-33,-28,53,-37,53,-9,-25,53,]),'TRUE':([0,1,7,8,11,12,19,20,21,22,23,24,25,26,27,28,29,30,36,37,53,54,67,73,74,80,],[6,6,6,6,6,6,-4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-9,-3,]),'PLUS':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,29,-21,-20,-18,-22,-18,29,-23,29,29,-24,29,29,-35,29,-36,29,29,-34,29,-33,29,29,29,29,-37,-9,-25,]),'OROR':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,21,-21,-20,-18,-22,-18,21,-23,21,21,-24,-30,-26,-35,-27,-36,-31,-29,-34,-32,-33,-28,21,21,21,-37,-9,-25,]),'IF':([0,11,19,53,73,74,80,],[8,8,-4,8,8,-9,-3,]),'COMMA':([3,6,10,15,16,31,40,41,42,43,44,45,46,47,48,49,50,51,56,61,68,74,76,],[-19,-21,-20,-22,-18,-23,-24,-30,-26,-35,-27,-36,-31,-29,-34,-32,-33,-28,67,70,-37,-9,-25,]),'VAR':([0,11,19,53,73,74,80,],[9,9,-4,9,9,-9,-3,]),'GE':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,28,-21,-20,-18,-22,-18,28,-23,28,28,-24,-30,28,-35,28,-36,-31,-29,-34,-32,-33,28,28,28,28,-37,-9,-25,]),'FALSE':([0,1,7,8,11,12,19,20,21,22,23,24,25,26,27,28,29,30,36,37,53,54,67,73,74,80,],[15,15,15,15,15,15,-4,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-9,-3,]),'LT':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,26,-21,-20,-18,-22,-18,26,-23,26,26,-24,-30,26,-35,26,-36,-31,-29,-34,-32,-33,26,26,26,26,-37,-9,-25,]),'SEMICOLON':([2,3,5,6,10,13,15,16,31,35,40,41,42,43,44,45,46,47,48,49,50,51,52,58,64,66,68,72,74,76,],[19,-19,-17,-21,-20,-18,-22,-18,-23,-15,-24,-30,-26,-35,-27,-36,-31,-29,-34,-32,-33,-28,-12,-14,73,-16,-37,-13,-9,-25,]),'RBRACE':([53,65,73,79,],[-11,74,-11,-10,]),'RETURN':([0,11,19,53,73,74,80,],[12,12,-4,12,12,-9,-3,]),'EQUALEQUAL':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,30,-21,-20,-18,-22,-18,30,-23,30,30,-24,-30,30,-35,30,-36,-31,-29,-34,-32,-33,-28,30,30,30,-37,-9,-25,]),'$end':([0,4,11,19,34,74,80,],[-2,0,-2,-4,-1,-9,-3,]),'FUNCTION':([0,1,7,8,11,12,19,20,21,22,23,24,25,26,27,28,29,30,36,37,53,54,67,73,74,80,],[14,18,18,18,14,18,-4,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-9,-3,]),'LE':([3,5,6,10,13,15,16,17,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,56,58,66,68,74,76,],[-19,25,-21,-20,-18,-22,-18,25,-23,25,25,-24,-30,25,-35,25,-36,-31,-29,-34,-32,-33,25,25,25,25,-37,-9,-25,]),'ELSE':([52,74,],[63,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'compoundstmt':([32,63,69,78,],[52,72,76,80,]),'args':([36,67,],[55,75,]),'params':([38,62,70,],[60,60,77,]),'optargs':([36,],[57,]),'statements':([53,73,],[65,79,]),'stmt':([0,11,53,73,],[2,2,64,64,]),'optparams':([38,62,],[59,71,]),'exp':([0,1,7,8,11,12,20,21,22,23,24,25,26,27,28,29,30,36,37,53,54,67,73,],[5,17,31,32,5,35,41,42,43,44,45,46,47,48,49,50,51,56,58,5,66,56,5,]),'js':([0,11,],[4,34,]),'element':([0,11,],[11,11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> js","S'",1,None,None,None),
  ('js -> element js','js',2,'p_js_element','jsgrammars.py',20),
  ('js -> <empty>','js',0,'p_js_empty','jsgrammars.py',24),
  ('element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt','element',6,'p_element_function_define','jsgrammars.py',28),
  ('element -> stmt SEMICOLON','element',2,'p_element_statement','jsgrammars.py',32),
  ('optparams -> params','optparams',1,'p_optparams_params','jsgrammars.py',36),
  ('optparams -> <empty>','optparams',0,'p_optparams_empty','jsgrammars.py',40),
  ('params -> IDENTIFIER COMMA params','params',3,'p_params','jsgrammars.py',44),
  ('params -> IDENTIFIER','params',1,'p_params_last','jsgrammars.py',48),
  ('compoundstmt -> LBRACE statements RBRACE','compoundstmt',3,'p_compoundstmt','jsgrammars.py',52),
  ('statements -> stmt SEMICOLON statements','statements',3,'p_statements','jsgrammars.py',56),
  ('statements -> <empty>','statements',0,'p_statements_empty','jsgrammars.py',60),
  ('stmt -> IF exp compoundstmt','stmt',3,'p_stmt_if_then','jsgrammars.py',64),
  ('stmt -> IF exp compoundstmt ELSE compoundstmt','stmt',5,'p_stmt_if_then_else','jsgrammars.py',68),
  ('stmt -> IDENTIFIER EQUAL exp','stmt',3,'p_stmt_assign','jsgrammars.py',72),
  ('stmt -> RETURN exp','stmt',2,'p_stmt_return','jsgrammars.py',76),
  ('stmt -> VAR IDENTIFIER EQUAL exp','stmt',4,'p_stmt_var','jsgrammars.py',80),
  ('stmt -> exp','stmt',1,'p_stmt_exp','jsgrammars.py',84),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','jsgrammars.py',89),
  ('exp -> NUMBER','exp',1,'p_exp_number','jsgrammars.py',93),
  ('exp -> STRING','exp',1,'p_exp_string','jsgrammars.py',97),
  ('exp -> TRUE','exp',1,'p_exp_true','jsgrammars.py',101),
  ('exp -> FALSE','exp',1,'p_exp_false','jsgrammars.py',105),
  ('exp -> NOT exp','exp',2,'p_exp_not','jsgrammars.py',109),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_parens','jsgrammars.py',113),
  ('exp -> FUNCTION LPAREN optparams RPAREN compoundstmt','exp',5,'p_exp_lambda','jsgrammars.py',117),
  ('exp -> exp OROR exp','exp',3,'p_binop','jsgrammars.py',121),
  ('exp -> exp ANDAND exp','exp',3,'p_binop','jsgrammars.py',122),
  ('exp -> exp EQUALEQUAL exp','exp',3,'p_binop','jsgrammars.py',123),
  ('exp -> exp LT exp','exp',3,'p_binop','jsgrammars.py',124),
  ('exp -> exp GT exp','exp',3,'p_binop','jsgrammars.py',125),
  ('exp -> exp LE exp','exp',3,'p_binop','jsgrammars.py',126),
  ('exp -> exp GE exp','exp',3,'p_binop','jsgrammars.py',127),
  ('exp -> exp PLUS exp','exp',3,'p_binop','jsgrammars.py',128),
  ('exp -> exp MINUS exp','exp',3,'p_binop','jsgrammars.py',129),
  ('exp -> exp TIMES exp','exp',3,'p_binop','jsgrammars.py',130),
  ('exp -> exp DIVIDE exp','exp',3,'p_binop','jsgrammars.py',131),
  ('exp -> IDENTIFIER LPAREN optargs RPAREN','exp',4,'p_call','jsgrammars.py',135),
  ('optargs -> args','optargs',1,'p_optargs','jsgrammars.py',139),
  ('optargs -> <empty>','optargs',0,'p_optargs_empty','jsgrammars.py',143),
  ('args -> exp COMMA args','args',3,'p_args','jsgrammars.py',147),
  ('args -> exp','args',1,'p_args_last','jsgrammars.py',151),
]
